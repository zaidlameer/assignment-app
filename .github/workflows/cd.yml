name: CD

on:
  push:
    branches: [ master ]

jobs:
  build-and-push:
    name: Build and push container
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.set-tag.outputs.image-tag }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Azure ACR login
        run: az acr login --name ${{ secrets.ACR_NAME }}
      
      - name: Set image tag
        id: set-tag
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "image-tag=${VERSION}" >> $GITHUB_OUTPUT
          else
            SHA=$(echo $GITHUB_SHA | cut -c1-7)
            echo "image-tag=sha-${SHA}" >> $GITHUB_OUTPUT
          fi
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./backend/customerManager
          file: ./backend/customerManager/Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ secrets.ACR_REGISTRY }}/customer-manager:${{ steps.set-tag.outputs.image-tag }}
            ${{ secrets.ACR_REGISTRY }}/customer-manager:latest
          cache-from: type=registry,ref=${{ secrets.ACR_REGISTRY }}/customer-manager:buildcache
          cache-to: type=registry,ref=${{ secrets.ACR_REGISTRY }}/customer-manager:buildcache,mode=max

  deploy:
    name: Deploy to Azure Container App
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
      name: production
      url: ${{ steps.deploy.outputs.container-app-url }}
    steps:
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
  
      # --- NEW: sanitize secrets to single-line, no CR/LF ---
      - name: Sanitize secrets
        shell: bash
        env:
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
        run: |
          sanitize() { tr -d '\r\n' ; }
          {
            printf 'DJANGO_SECRET_KEY_CLEAN=';   printf '%s' "$DJANGO_SECRET_KEY"   | sanitize; echo
            printf 'POSTGRES_DB_CLEAN=';        printf '%s' "$POSTGRES_DB"        | sanitize; echo
            printf 'POSTGRES_USER_CLEAN=';      printf '%s' "$POSTGRES_USER"      | sanitize; echo
            printf 'POSTGRES_PASSWORD_CLEAN=';  printf '%s' "$POSTGRES_PASSWORD"  | sanitize; echo
            printf 'POSTGRES_HOST_CLEAN=';      printf '%s' "$POSTGRES_HOST"      | sanitize; echo
            printf 'POSTGRES_PORT_CLEAN=';      printf '%s' "$POSTGRES_PORT"      | sanitize; echo
          } >> "$GITHUB_ENV"
  
      - name: Deploy to Azure Container App
        id: deploy
        uses: azure/container-apps-deploy-action@v1
        with:
          resourceGroup: ${{ secrets.AZURE_RESOURCE_GROUP }}
          containerAppName: ${{ secrets.AZURE_CONTAINER_APP_NAME }}
          imageToDeploy: ${{ secrets.ACR_REGISTRY }}/customer-manager:${{ needs.build-and-push.outputs.image-tag }}
          # Use YAML folded style (>) and QUOTE every value
          environmentVariables: >
            DEBUG=True
            DJANGO_SECRET_KEY="${DJANGO_SECRET_KEY_CLEAN}"
            POSTGRES_DB="${POSTGRES_DB_CLEAN}"
            POSTGRES_USER="${POSTGRES_USER_CLEAN}"
            POSTGRES_PASSWORD="${POSTGRES_PASSWORD_CLEAN}"
            POSTGRES_HOST="${POSTGRES_HOST_CLEAN}"
            POSTGRES_PORT="${POSTGRES_PORT_CLEAN}"
